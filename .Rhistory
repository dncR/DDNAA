K=0
sum=0
for(i in 1:m){
for(j in 1:n){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m*n)
res[k,1]=K
bias = res[k,1]-auc
}
res=cbind(res,bias)
head(res)
set.seed(1)
auc=0.7
n=20
m=20
r2x=0.25
My=2.5
r2y=0.25
Mx=sqrt(r2x+r2y)*qnorm(auc)+My
res = matrix(c(NA,auc),1000,4, byrow=T)
colnames(res)=c("predict", "true","bias", "rmse")
bias2=0
L=0
for(k in 1:1000){
x=rnorm(n,Mx,sqrt(r2x))
y=rnorm(m,My,sqrt(r2x))
sx=sd(x)
sy=sd(y)
iqrx=quantile(x,0.75)-quantile(x,0.25)
iqry=quantile(y,0.75)-quantile(y,0.25)
hx=0.9*min(sx,iqrx/1.34)*(m^(-1.5))
hy=0.9*min(sy,iqry/1.34)*(n^(-1.5))
K=0
sum=0
for(i in 1:m){
for(j in 1:n){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m*n)
res[k,1]=K
res[k,3]=res[k,1]-auc
res[k,4]=(res[k,1]-auc)^2
}
head(res)
mean(res$bias)
mean(res[3])
mean(res[,3])
sd(res[,4])
sqrt(sum(res[,4])/1000)
sd(res[,3])
sqrt(sum(res[,4])/999)
sum(res[,3])/1000
sd(res[,1])
bias=mean(res[,3])
rmse=sqrt(sum(res[,4])/1000)
table(bias,rmse)
result=cbin(bias,rmse)
result=rbind(bias,rmse)
result
set.seed(1)
auc = c(0.7, 0.8, 0.9)
n=20
m=20
r2x=0.25
My=2.5
r2y=0.25
result= NULL
for(l in 1:length(auc)){
Mx=sqrt(r2x+r2y)*qnorm(auc[l])+My
res = matrix(c(NA,auc[l]),1000,4, byrow=T)
colnames(res)=c("predict", "true","bias", "rmse")
bias2=0
L=0
for(k in 1:1000){
x=rnorm(n,Mx,sqrt(r2x))
y=rnorm(m,My,sqrt(r2x))
sx=sd(x)
sy=sd(y)
iqrx=quantile(x,0.75)-quantile(x,0.25)
iqry=quantile(y,0.75)-quantile(y,0.25)
hx=0.9*min(sx,iqrx/1.34)*(m^(-1.5))
hy=0.9*min(sy,iqry/1.34)*(n^(-1.5))
K=0
sum=0
for(i in 1:m){
for(j in 1:n){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m*n)
res[k,1]=K
res[k,3]=res[k,1]-auc[l]
res[k,4]=(res[k,1]-auc[l])^2
}
bias=mean(res[,3])
rmse=sqrt(sum(res[,4])/1000)
result=cbind(result,c(bias,rmse))
}
result
dimnames(result)=list(c("bias","RMSE",c("AUC_0.7","AUC_0.8","AUC_0.9")))
dimnames(result)=list(c("bias","RMSE"),c("AUC_0.7","AUC_0.8","AUC_0.9"))
result
set.seed(1)
auc = c(0.7, 0.8, 0.9)
n=c(20,100)
m=c(20,100)
r2x=0.25
My=2.5
r2y=0.25
final=list()
for(t in 1:length(n)){
result= NULL
for(l in 1:length(auc)){
Mx=sqrt(r2x+r2y)*qnorm(auc[l])+My
res = matrix(c(NA,auc[l]),1000,4, byrow=T)
colnames(res)=c("predict", "true","bias", "rmse")
bias2=0
L=0
for(k in 1:1000){
x=rnorm(n[t],Mx,sqrt(r2x))
y=rnorm(m[t],My,sqrt(r2x))
sx=sd(x)
sy=sd(y)
iqrx=quantile(x,0.75)-quantile(x,0.25)
iqry=quantile(y,0.75)-quantile(y,0.25)
hx=0.9*min(sx,iqrx/1.34)*(m[t]^(-1.5))
hy=0.9*min(sy,iqry/1.34)*(n[t]^(-1.5))
K=0
sum=0
for(i in 1:m[t]){
for(j in 1:n[t]){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m[t]*n[t])
res[k,1]=K
res[k,3]=res[k,1]-auc[l]
res[k,4]=(res[k,1]-auc[l])^2
}
bias=mean(res[,3])
rmse=sqrt(sum(res[,4])/1000)
result=cbind(result,c(bias,rmse))
}
dimnames(result)=list(c("bias","RMSE"),c("AUC_0.7","AUC_0.8","AUC_0.9"))
final[t]=result
}
set.seed(1)
auc = c(0.7, 0.8, 0.9)
n=c(20,100)
m=c(20,100)
r2x=0.25
My=2.5
r2y=0.25
final=list()
for(t in 1:length(n)){
result= NULL
for(l in 1:length(auc)){
Mx=sqrt(r2x+r2y)*qnorm(auc[l])+My
res = matrix(c(NA,auc[l]),1000,4, byrow=T)
colnames(res)=c("predict", "true","bias", "rmse")
bias2=0
L=0
for(k in 1:1000){
x=rnorm(n[t],Mx,sqrt(r2x))
y=rnorm(m[t],My,sqrt(r2x))
sx=sd(x)
sy=sd(y)
iqrx=quantile(x,0.75)-quantile(x,0.25)
iqry=quantile(y,0.75)-quantile(y,0.25)
hx=0.9*min(sx,iqrx/1.34)*(m[t]^(-1.5))
hy=0.9*min(sy,iqry/1.34)*(n[t]^(-1.5))
K=0
sum=0
for(i in 1:m[t]){
for(j in 1:n[t]){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m[t]*n[t])
res[k,1]=K
res[k,3]=res[k,1]-auc[l]
res[k,4]=(res[k,1]-auc[l])^2
}
bias=mean(res[,3])
rmse=sqrt(sum(res[,4])/1000)
result=cbind(result,c(bias,rmse))
}
dimnames(result)=list(c("bias","RMSE"),c("AUC_0.7","AUC_0.8","AUC_0.9"))
final[[t]]=result
names(final)=c("n=20","n=100")
}
set.seed(1)
auc = c(0.7, 0.8, 0.9)
n=c(20,100)
m=c(20,100)
r2x=0.25
My=2.5
r2y=0.25
final=list()
for(t in 1:length(n)){
result= NULL
for(l in 1:length(auc)){
Mx=sqrt(r2x+r2y)*qnorm(auc[l])+My
res = matrix(c(NA,auc[l]),1000,4, byrow=T)
colnames(res)=c("predict", "true","bias", "rmse")
bias2=0
L=0
for(k in 1:1000){
x=rnorm(n[t],Mx,sqrt(r2x))
y=rnorm(m[t],My,sqrt(r2x))
sx=sd(x)
sy=sd(y)
iqrx=quantile(x,0.75)-quantile(x,0.25)
iqry=quantile(y,0.75)-quantile(y,0.25)
hx=0.9*min(sx,iqrx/1.34)*(m[t]^(-1.5))
hy=0.9*min(sy,iqry/1.34)*(n[t]^(-1.5))
K=0
sum=0
for(i in 1:m[t]){
for(j in 1:n[t]){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m[t]*n[t])
res[k,1]=K
res[k,3]=res[k,1]-auc[l]
res[k,4]=(res[k,1]-auc[l])^2
}
bias=mean(res[,3])
rmse=sqrt(sum(res[,4])/1000)
result=cbind(result,c(bias,rmse))
}
dimnames(result)=list(c("bias","RMSE"),c("AUC_0.7","AUC_0.8","AUC_0.9"))
final[[t]]=result
}
final
names(final)=paste("n = m =",n,sep=" ")
final
set.seed(1)
auc = c(0.7, 0.8, 0.9)
n=c(20,100)
m=c(20,100)
r2x=0.25
My=2.5
r2y=0.09
final=list()
for(t in 1:length(n)){
result= NULL
for(l in 1:length(auc)){
Mx=sqrt(r2x+r2y)*qnorm(auc[l])+My
res = matrix(c(NA,auc[l]),1000,4, byrow=T)
colnames(res)=c("predict", "true","bias", "rmse")
bias2=0
L=0
for(k in 1:1000){
x=rnorm(n[t],Mx,sqrt(r2x))
y=rnorm(m[t],My,sqrt(r2x))
sx=sd(x)
sy=sd(y)
iqrx=quantile(x,0.75)-quantile(x,0.25)
iqry=quantile(y,0.75)-quantile(y,0.25)
hx=0.9*min(sx,iqrx/1.34)*(m[t]^(-1.5))
hy=0.9*min(sy,iqry/1.34)*(n[t]^(-1.5))
K=0
sum=0
for(i in 1:m[t]){
for(j in 1:n[t]){
sum=pnorm((x[i]-y[j])/(sqrt((hx^2)+(hy^2))))
K=K+sum
}
}
K=K/(m[t]*n[t])
res[k,1]=K
res[k,3]=res[k,1]-auc[l]
res[k,4]=(res[k,1]-auc[l])^2
}
bias=mean(res[,3])
rmse=sqrt(sum(res[,4])/1000)
result=cbind(result,c(bias,rmse))
}
dimnames(result)=list(c("bias","RMSE"),c("AUC_0.7","AUC_0.8","AUC_0.9"))
final[[t]]=result
}
names(final)=paste("n = m =",n,sep=" ")
final
sqrt(0.09)
6/57
5/160
8/76
3/30
3/5
0.5-0.4772
0.0228*1000
8*12/30
sqrt(0.83)
rocdata <-
function(grp, pred, event)
{
# Produces x and y co-ordinates for ROC curve plot
# Arguments: grp - labels classifying subject status
#            pred - values of each observation
# Output: List with 2 components:
#         roc = data.frame with x and y co-ordinates of plot
#         stats = data.frame containing: area under ROC curve, p value, upper and lower 95% confidence interval
grp <- as.factor(grp)
if (length(pred) != length(grp)) {
stop("The number of classifiers must match the number of data points")
}
if (length(levels(grp)) != 2) {
stop("There must only be 2 values for the classifier")
}
cut <- unique(pred)
tp <- sapply(cut, function(x) length(which(pred > x & grp == event)))
fn <- sapply(cut, function(x) length(which(pred < x & grp == event)))
fp <- sapply(cut, function(x) length(which(pred > x & grp != event)))
tn <- sapply(cut, function(x) length(which(pred < x & grp != event)))
tpr <- tp / (tp + fn)
fpr <- fp / (fp + tn)
roc = data.frame(x = fpr, y = tpr)
roc <- roc[order(roc$x, roc$y),]
i <- 2:nrow(roc)
auc <- (roc$x[i] - roc$x[i - 1]) %*% (roc$y[i] + roc$y[i - 1])/2
pos <- pred[grp == event]
neg <- pred[grp != event]
q1 <- auc/(2-auc)
q2 <- (2*auc^2)/(1+auc)
se.auc <- sqrt(((auc * (1 - auc)) + ((length(pos) -1)*(q1 - auc^2)) + ((length(neg) -1)*(q2 - auc^2)))/(length(pos)*length(neg)))
ci.upper <- auc + (se.auc * 1.96)
ci.lower <- auc - (se.auc * 1.96)
se.auc.null <- sqrt((1 + length(pos) + length(neg))/(12*length(pos)*length(neg)))
z <- (auc - 0.5)/se.auc.null
p <- 2*pnorm(-abs(z))
stats <- data.frame (auc = auc,
p.value = p,
ci.upper = ci.upper,
ci.lower = ci.lower
)
return (list(roc = roc, stats = stats))
}
install.packages("shiny")
library(shiny)
setwd("/Volumes/SELCUK/")
library(shiny)
runApp("MVN")
install.packages("~/Desktop/MVN-paket/MVN_4.0.tar.gz", repos = NULL, type = "source")
library(MVN)
?dhTest
Iris = iris[1:50, 1:4] # Iris data only for setosa and four variables
result = dhTest(Iris, qqplot = TRUE)
result
setClass("mardia",
slots = c(g1p = "numeric", chi.skew="numeric", p.value.skew="numeric", chi.small.skew="numeric",
p.value.small="numeric", g2p="numeric", z.kurtosis="numeric", p.value.kurt="numeric", dname="character", dataframe="data.frame"))
setGeneric("mardia", function(object) standardGeneric("mardia"))
setMethod("show",
signature = "mardia",
definition = function(object) {
n=dim(object@dataframe)[1]
cat("   Mardia's Multivariate Normality Test", "\n", sep = " ")
cat("---------------------------------------", "\n", sep = " ")
cat("   data :", object@dname, "\n\n", sep = " ")
cat("   g1p            :", object@g1p, "\n", sep = " ")
cat("   chi.skew       :", object@chi.skew, "\n", sep = " ")
cat("   p.value.skew   :", object@p.value.skew, "\n\n", sep = " ")
cat("   g2p            :", object@g2p, "\n", sep = " ")
cat("   z.kurtosis     :", object@z.kurtosis, "\n", sep = " ")
cat("   p.value.kurt   :", object@p.value.kurt, "\n\n", sep = " ")
cat("   chi.small.skew :", object@chi.small.skew, "\n", sep = " ")
cat("   p.value.small  :", object@p.value.small, "\n\n", sep = " ")
if(n>=20){
cat(if((object@p.value.skew > 0.05) & (object@p.value.kurt > 0.05)){"   Result         : Data is multivariate normal."}
else {"   Result          : Data is not multivariate normal."},"\n")
}
if(n<20){
cat(if((object@p.value.small > 0.05) & (object@p.value.kurt > 0.05)){"   Result         : Data is multivariate normal."}
else {"   Result          : Data is not multivariate normal."},"\n")
}
cat("---------------------------------------", "\n\n", sep = " ")
invisible(NULL)
})
setClass("hz",
slots = c(HZ = "numeric", p.value="numeric", dname="character", dataframe="data.frame"))
setGeneric("hz", function(object) standardGeneric("hz"))
setMethod("show",
signature = "hz",
definition = function(object) {
cat("  Henze-Zirkler's Multivariate Normality Test", "\n", sep = " ")
cat("---------------------------------------------", "\n", sep = " ")
cat("  data :", object@dname, "\n\n", sep = " ")
cat("  HZ      :", object@HZ, "\n", sep = " ")
cat("  p-value :", object@p.value, "\n\n", sep = " ")
cat(if(object@p.value > 0.05){"  Result  : Data is multivariate normal."}
else {"  Result  : Data is not multivariate normal."},"\n")
cat("---------------------------------------------", "\n\n", sep = " ")
invisible(NULL)
})
setClass("royston",
slots = c(H = "numeric", p.value="numeric", dname="character", dataframe="data.frame"))
setGeneric("royston", function(object) standardGeneric("royston"))
setMethod("show",
signature = "royston",
definition = function(object) {
cat("  Royston's Multivariate Normality Test", "\n", sep = " ")
cat("---------------------------------------------", "\n", sep = " ")
cat("  data :", object@dname, "\n\n", sep = " ")
cat("  H       :", object@H, "\n", sep = " ")
cat("  p-value :", object@p.value, "\n\n", sep = " ")
cat(if(object@p.value > 0.05){"  Result  : Data is multivariate normal."}
else {"  Result  : Data is not multivariate normal."},"\n")
cat("---------------------------------------------", "\n\n", sep = " ")
invisible(NULL)
})
setClass("mardia",
slots = c(g1p = "numeric", chi.skew="numeric", p.value.skew="numeric", chi.small.skew="numeric",
p.value.small="numeric", g2p="numeric", z.kurtosis="numeric", p.value.kurt="numeric", dname="character", dataframe="data.frame"))
setGeneric("mardia", function(object) standardGeneric("mardia"))
setMethod("show",
signature = "mardia",
definition = function(object) {
n=dim(object@dataframe)[1]
cat("   Mardia's Multivariate Normality Test", "\n", sep = " ")
cat("---------------------------------------", "\n", sep = " ")
cat("   data :", object@dname, "\n\n", sep = " ")
cat("   g1p            :", object@g1p, "\n", sep = " ")
cat("   chi.skew       :", object@chi.skew, "\n", sep = " ")
cat("   p.value.skew   :", object@p.value.skew, "\n\n", sep = " ")
cat("   g2p            :", object@g2p, "\n", sep = " ")
cat("   z.kurtosis     :", object@z.kurtosis, "\n", sep = " ")
cat("   p.value.kurt   :", object@p.value.kurt, "\n\n", sep = " ")
cat("   chi.small.skew :", object@chi.small.skew, "\n", sep = " ")
cat("   p.value.small  :", object@p.value.small, "\n\n", sep = " ")
if(n>=20){
cat(if((object@p.value.skew > 0.05) & (object@p.value.kurt > 0.05)){"   Result         : Data is multivariate normal."}
else {"   Result          : Data is not multivariate normal."},"\n")
}
if(n<20){
cat(if((object@p.value.small > 0.05) & (object@p.value.kurt > 0.05)){"   Result         : Data is multivariate normal."}
else {"   Result          : Data is not multivariate normal."},"\n")
}
cat("---------------------------------------", "\n\n", sep = " ")
invisible(NULL)
})
setClass("hz",
slots = c(HZ = "numeric", p.value="numeric", dname="character", dataframe="data.frame"))
setGeneric("hz", function(object) standardGeneric("hz"))
setMethod("show",
signature = "hz",
definition = function(object) {
cat("  Henze-Zirkler's Multivariate Normality Test", "\n", sep = " ")
cat("---------------------------------------------", "\n", sep = " ")
cat("  data :", object@dname, "\n\n", sep = " ")
cat("  HZ      :", object@HZ, "\n", sep = " ")
cat("  p-value :", object@p.value, "\n\n", sep = " ")
cat(if(object@p.value > 0.05){"  Result  : Data is multivariate normal."}
else {"  Result  : Data is not multivariate normal."},"\n")
cat("---------------------------------------------", "\n\n", sep = " ")
invisible(NULL)
})
setClass("royston",
slots = c(H = "numeric", p.value="numeric", dname="character", dataframe="data.frame"))
setGeneric("royston", function(object) standardGeneric("royston"))
setMethod("show",
signature = "royston",
definition = function(object) {
cat("  Royston's Multivariate Normality Test", "\n", sep = " ")
cat("---------------------------------------------", "\n", sep = " ")
cat("  data :", object@dname, "\n\n", sep = " ")
cat("  H       :", object@H, "\n", sep = " ")
cat("  p-value :", object@p.value, "\n\n", sep = " ")
cat(if(object@p.value > 0.05){"  Result  : Data is multivariate normal."}
else {"  Result  : Data is not multivariate normal."},"\n")
cat("---------------------------------------------", "\n\n", sep = " ")
invisible(NULL)
})
setwd("/Users//selcukorkmaz/Dropbox/GSD/Studies/easyROC/devel/")
library(shiny)
runApp()
library(OptimalCutpoints)
??OptimalCutpoints
library(OptimalCutpoints)
data(elas)
####################
# marker: elas
# status: status
# categorical covariates:
#    	gender
####################
###########################################################
# Youden Index Method ("Youden"): Covariate gender
###########################################################
# Defaut method
optimal.cutpoint.Youden <- optimal.cutpoints(X = "elas", status = "status", tag.healthy = 0,
methods = "Youden", data = elas, pop.prev = NULL, categorical.cov = "gender",
control = control.cutpoints(), ci.fit = FALSE, conf.level = 0.95, trace = FALSE)
summary(optimal.cutpoint.Youden )
res=optimal.cutpoint.Youden
res[[1]][[1]]$measures.acc
res[[1]][[1]]$optimal.cutoff
runApp()
setwd("~/Dropbox/GSD/Studies/ddimer")
library(shiny)
runApp('DDNAA/')
runApp('DDNAA/')
